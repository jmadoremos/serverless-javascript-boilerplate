service: serverless-javascript-boilerplate

frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  region: ${opt:region, 'us-east-1'}
  stage: ${opt:stage, 'dev'}
  deploymentBucket:
    name: !ImportValue initialize-serverless-${self:provider.stage}.ServerlessDeploymentBucketName
    maxPreviousDeploymentArtifacts: 1
  role: !GetAtt SharedLambdaFunctionRole.Arn
  cfnRole: !ImportValue initialize-serverless-${self:provider.stage}.CloudFormationStackRoleArn
  versionFunctions: false
  tags:
    Environment: ${self:provider.region}-${self:provider.stage}
  ####################################################
  ## Uncomment to include API Gateway for REST APIs
  # apiGateway:
  #   restApiId: !Ref ApiGatewayRestApi
  #   restApiRootResourceId: !GetAtt ApiGatewayRestApi.RootResourceId

package:
  individually: true

functions:
  FooBarLambdaFunction: ${file(./sls/lambda/FooBarLambdaFunction.yml)}
  HelloWorldLambdaFunction: ${file(./sls/lambda/HelloWorldLambdaFunction.yml)}

resources:
  Description: CloudFormation stack for ${self:service}-${self:provider.region}-${self:provider.stage}
  Resources:
    ####################################################
    ## Uncomment to include API Gateway for REST APIs
    # ApiGatewayRestApi: ${file(./sls/api-gateway/ApiGatewayRestApi.yml)}
    ReadS3Policy: ${file(./sls/iam/ReadS3Policy.yml)}
    SharedLambdaFunctionRole: ${file(./sls/iam/SharedLambdaFunctionRole.yml)}
  Outputs:
    ####################################################
    ## Uncomment to include API Gateway for REST APIs
    # ApiGatewayRestApiId:
    #   Description: The REST API Id of the API Gateway
    #   Value: !Ref ApiGatewayRestApi
    # ApiGatewayRootResourceId:
    #   Description: The root resource Id of the API Gateway
    #   Value: !GetAtt ApiGatewayRestApi.RootResourceId
    SharedLambdaFunctionRoleArn:
      Description: Lambda function role generated by the template
      Value: !GetAtt SharedLambdaFunctionRole.Arn

plugins:
  - serverless-webpack
  - serverless-offline

custom:
  serverless-offline:
    lambdaPort: 8180
    httpPort: 8080
  webpack:
    includeModules:
      forceExclude:
        - aws-sdk
